git init

Configuring Got:
	System-level configuration:
		git config --system (stored in ->> /etc/gitconfig or c:\Programs Files(x86)\Git\etc\gitconfig)

	User-level configuration:
		git config --global (stored in ->> ~/.gitconfig or c:\Users\<NAME>\.gitconfig)

	Repository-level configuration:
		git config (stored in ->> .git/config in each repo)

	if no changes are made t the lower end then the upper settings are used for lower-levels as well 

git config --global --list (list all user-level configs if any)

To make user-level config:
	git config --global user.name "username"
	git config --global user.email "useremail@something.com"
	git config --global core.editor vim
	git config --global help.autocorrect 1  // waits for 0.1 sec and automatically corrects the mityped command
	git config --global color.ui auto
	git config --global core.autocrlf true/false/input // crlf, carriage return line feed
		// true for windows
		// input for Mac/Linux
		// false for windows if we are never going to commit on Unix(Linux/Mac)

Commands: ###########################-----##########################
	git init // creates a .git file with the repository and its meta-data
	git status // tracks the commited and untracked files
	echo "Hello, Git" > README.txt // adds text to a file
	touch file1.txt file2.txt // to add files

	git config --list // all configs
	git config --global --list // all user-level configs
	git config --global --unset user.name
	git config --unset user.name(or any other setting)
	vim .git/config // repo-level
	cat ~/.gitconfig
	clear // clear the console area

	git add filename // just adds file isnt commited(explicitly that file only)
	git add -A // adds all files including untracked(non-staged) as well as tracked files(staged-files) and already added and changes made to files
	git add -u // add all (these are already added) updated(change/deletion) files
	git commit // brings the setted text-editor for add ing text at 
	file commit, add to the STAGING-AREA
	git commit -m "message here" (we can commit different files in different commits)
	git log 	// brings the history of commit
	git log --oneline 	// condensed version of git commits
	git log --oneline | wc -l 	// tells the total number of commits
	git log --oneline --graph // tells the different braches and merges
	git log --format=short <---> git shortlog // tells the authors and commits from the each, total by them
	git shortlog -sne //	gives only summary, in decreasing order of commits, including their email as well
	git diff dd6819..a15ec6 	// to see the difference between these two git commits
	git diff HEAD~1..HEAD // HEAD is the top-most commit
	rm file1.txt and git status will show that this file is deleted
	mv file1.txt new_file1.txt // now git status will show the changes
	git checkout filename // pull this file from the repository, by default the master branch
	git reset --hard // rather than doing checkout for individual files
	git reset --hard HEAD~1
	git reset --soft HEAD~1 // removes the top commit, changes remain #check this
	git clean -n // shows all the unstaged files
	git clean -f // removes all the unstaged files
	vi .gitignore // creates a file hich contaoins the files we ant to ignore for commit, file stucture is relative to this .gitignore directory, relative to the repositroy, #check this

	git clone url 	// to clone to a local repository
	git show HEAD 	// shows the head/latest commit
	git show HEAD~1		// shows the particular commit
	git show 4374543 // show git with this hash
	git remote		// shows the source from where the code came from
	git remote -v

	--- see Module 3 , Git Protocols Lecture ---

	git branch
	git remote
	git remote add nickname url 	//	for public repos
	git push -u nickname master 	//	when in that directory
	//	it asks for username and password to credentialize it

